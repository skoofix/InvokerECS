//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherScoreUI;

    public static Entitas.IMatcher<GameEntity> ScoreUI {
        get {
            if (_matcherScoreUI == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.ScoreUI);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherScoreUI = matcher;
            }

            return _matcherScoreUI;
        }
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public Code.Gameplay.Features.Score.ScoreUIComponent scoreUI { get { return (Code.Gameplay.Features.Score.ScoreUIComponent)GetComponent(GameComponentsLookup.ScoreUI); } }
    public Code.Gameplay.Features.Score.Behaviours.ScoreUI ScoreUI { get { return scoreUI.Value; } }
    public bool hasScoreUI { get { return HasComponent(GameComponentsLookup.ScoreUI); } }

    public GameEntity AddScoreUI(Code.Gameplay.Features.Score.Behaviours.ScoreUI newValue) {
        var index = GameComponentsLookup.ScoreUI;
        var component = (Code.Gameplay.Features.Score.ScoreUIComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Score.ScoreUIComponent));
        component.Value = newValue;
        AddComponent(index, component);
        return this;
    }

    public GameEntity ReplaceScoreUI(Code.Gameplay.Features.Score.Behaviours.ScoreUI newValue) {
        var index = GameComponentsLookup.ScoreUI;
        var component = (Code.Gameplay.Features.Score.ScoreUIComponent)CreateComponent(index, typeof(Code.Gameplay.Features.Score.ScoreUIComponent));
        component.Value = newValue;
        ReplaceComponent(index, component);
        return this;
    }

    public GameEntity RemoveScoreUI() {
        RemoveComponent(GameComponentsLookup.ScoreUI);
        return this;
    }
}
